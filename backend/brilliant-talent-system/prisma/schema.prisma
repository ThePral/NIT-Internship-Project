// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  username      String    @unique
  hash_password String                
  firstname     String?
  lastname      String?

  grade         Float                 
  universityId  Int                   
  university    University @relation(fields: [universityId], references: [id], onDelete: Cascade)

  points        Float?      
  cohort        Int? // 1 or 2

  priorities    StudentPriority[]
  acceptances   Acceptance[]

  @@map("users")    
  @@index([cohort, points])
}

model University {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  grade  Float

  users  User[]

  @@map("universities")
}

model Minor {
  id       Int    @id @default(autoincrement())
  name     String @unique
  req      String?  
  capacity Int

  priorities  StudentPriority[]
  acceptances Acceptance[]

  @@map("minors")
}

model StudentPriority {
  id          Int     @id @default(autoincrement())
  studentId   Int
  minorId     Int
  priority    Int         // 1..3
  isAccepted  Boolean?

  student     User   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  minor       Minor  @relation(fields: [minorId], references: [id], onDelete: Cascade)

  @@unique([studentId, priority])
  @@index([minorId])
  @@map("student_priorities")
}

model AllocationRun {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  privilegedUniId Int       
  cohortPolicy    String   
  acceptances     Acceptance[]

  @@map("allocation_runs")
}

model Acceptance {
  id         Int      @id @default(autoincrement())
  runId      Int
  studentId  Int
  minorId    Int
  priority   Int
  points     Float
  cohort     Int      // 1 or 2
  createdAt  DateTime @default(now())

  run        AllocationRun @relation(fields: [runId], references: [id], onDelete: Cascade)
  student    User          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  minor      Minor         @relation(fields: [minorId], references: [id], onDelete: Cascade)

  @@unique([runId, studentId])
  @@index([minorId])
  @@map("acceptances")
}


model Admin {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username String @unique
  hash_password String

  @@map("admins")
}

model SuperAdmin {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username String @unique
  hash_password String

  @@map("superAdmins")
}